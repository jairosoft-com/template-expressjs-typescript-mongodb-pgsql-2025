import { Request, Response, NextFunction } from 'express';
import { BaseController } from '@common/base/BaseController';
import { {{ComponentName}}Service } from './{{componentName}}.service';

/**
 * {{ComponentName}} Controller
 * Handles HTTP requests for {{componentName}} operations
 */
export class {{ComponentName}}Controller extends BaseController {
  constructor(private readonly service: {{ComponentName}}Service) {
    super('{{componentName}}');
  }

  /**
   * Get all {{componentName}}s
   */
  public getAll = this.asyncHandler(
    async (req: Request, res: Response, _next: NextFunction) => {
      const { page, limit, skip } = this.parsePagination(req);
      
      const result = await this.service.findAll({
        skip,
        limit
      });

      return this.sendPaginated(res, result.data, {
        page,
        limit,
        total: result.total,
        totalPages: Math.ceil(result.total / limit)
      });
    }
  );

  /**
   * Get {{componentName}} by ID
   */
  public getById = this.asyncHandler(
    async (req: Request, res: Response, _next: NextFunction) => {
      const { id } = req.params;
      
      const result = await this.service.findById(id);
      
      return this.sendSuccess(res, result);
    }
  );

  /**
   * Create new {{componentName}}
   */
  public create = this.asyncHandler(
    async (req: Request, res: Response, _next: NextFunction) => {
      const result = await this.service.create(req.body);
      
      return this.sendSuccess(
        res,
        result,
        '{{ComponentName}} created successfully',
        201
      );
    }
  );

  /**
   * Update {{componentName}}
   */
  public update = this.asyncHandler(
    async (req: Request, res: Response, _next: NextFunction) => {
      const { id } = req.params;
      
      const result = await this.service.update(id, req.body);
      
      return this.sendSuccess(
        res,
        result,
        '{{ComponentName}} updated successfully'
      );
    }
  );

  /**
   * Delete {{componentName}}
   */
  public delete = this.asyncHandler(
    async (req: Request, res: Response, _next: NextFunction) => {
      const { id } = req.params;
      
      await this.service.delete(id);
      
      return this.sendSuccess(
        res,
        null,
        '{{ComponentName}} deleted successfully'
      );
    }
  );
}