import { z } from 'zod';

/**
 * {{ComponentName}} Validation Schemas
 */

/**
 * Schema for creating a new {{componentName}}
 */
export const create{{ComponentName}}Schema = z.object({
  body: z.object({
    // TODO: Add your validation fields here
    // Example:
    // name: z.string().min(1).max(100),
    // description: z.string().optional(),
    // isActive: z.boolean().default(true)
  })
});

/**
 * Schema for updating a {{componentName}}
 */
export const update{{ComponentName}}Schema = z.object({
  body: z.object({
    // TODO: Add your validation fields here (all optional for partial updates)
    // Example:
    // name: z.string().min(1).max(100).optional(),
    // description: z.string().optional(),
    // isActive: z.boolean().optional()
  })
});

/**
 * Schema for query parameters
 * Uses z.coerce to automatically convert string query params to numbers
 */
export const query{{ComponentName}}Schema = z.object({
  query: z.object({
    page: z.coerce.number().min(1).optional(),
    limit: z.coerce.number().min(1).max(100).optional(),
    sortBy: z.string().optional(),
    sortOrder: z.enum(['asc', 'desc']).optional()
  })
});

// Type exports
export type Create{{ComponentName}}Input = z.infer<typeof create{{ComponentName}}Schema>['body'];
export type Update{{ComponentName}}Input = z.infer<typeof update{{ComponentName}}Schema>['body'];
export type Query{{ComponentName}}Input = z.infer<typeof query{{ComponentName}}Schema>['query'];